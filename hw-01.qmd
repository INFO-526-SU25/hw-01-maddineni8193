---
title: "HW 01"
author: "Sravani Maddineni"
format: 
  html:
    embed-resources: true
execute :
  warning: false
  message: false
  error: false
toc: true
---

## 0 - Setup

```{r setup}
if (!require("pacman")) 
  install.packages("pacman")

# use this line for installing/loading
pacman::p_load(tidyverse,
               palmerpenguins) 

devtools::install_github("tidyverse/dsbox")
```

```{r}

```

## 1 - Road traffic accidents in Edinburgh

```         
```

```{r}
# Load and glimpse the dataset
library(tidyverse)
library(hms)

accidents <- read_csv("data/accidents.csv")

# View structure: number of rows, columns, and variable types
glimpse(accidents)

```

```{r}
# Preprocessing: convert date/time and classify as weekend/weekday
accidents <- accidents %>%
  mutate(
    date = as.Date(date),
    time = as_hms(time),
    day_type = if_else(weekdays(date) %in% c("Saturday", "Sunday"), "Weekend", "Weekday"),
    severity = factor(severity, levels = c("Fatal", "Serious", "Slight"))
  )

```

```{r}
# Density plot showing accident times by day type and severity
ggplot(accidents, aes(x = time, fill = severity)) +
  geom_density(alpha = 0.6) +
  facet_wrap(~day_type, ncol = 1) +
  scale_fill_manual(values = c("Fatal" = "purple", "Serious" = "steelblue", "Slight" = "khaki")) +
  labs(
    title = "Accident Density in Edinburgh Throughout the Day (2018)",
    subtitle = "By Day Type (Weekend vs Weekday) and Severity",
    x = "Time of Day",
    y = "Density",
    fill = "Severity"
  ) +
  theme_minimal()

```

Interpretation

The dataset contains records of traffic accidents in Edinburgh during 2018. After inspecting the structure with glimpse( ), we see variables such as date, time, location, and severity.

The plot above shows the distribution of accident times across weekdays and weekends. Most accidents happen during morning and evening hours, likely aligned with commuting times. Slight accidents dominate, but serious and fatal ones also peak around the same hours. Weekends show a delay in peak accident time, indicating different travel behavior.

```         
```

## 2 - NYC marathon winner

```{r}
# Load necessary libraries
# install.packages("openintro")
library(ggplot2)
library(openintro)
# Load the dataset
data("nyc_marathon")
head(nyc_marathon)
summary(nyc_marathon)
# Histogram of marathon times
ggplot(data = nyc_marathon, aes(x = time)) +
  geom_histogram(binwidth = 5, fill = "lightblue", color = "black") +
  labs(
    title = "Histogram of Marathon Times",
    x = "Marathon Time (minutes)",
    y = "Frequency"
  ) +
  theme_minimal()

# Box plot of marathon times
ggplot(nyc_marathon, aes(y=time)) +
geom_boxplot(fill="lightgreen", color="black") +
labs(title="Box Plot of Marathon Times", y="Marathon Time (minutes)") +
  theme_minimal()

# Create Side-by-Side Box Plots for Men and Women
ggplot(nyc_marathon, aes(x=division, y=time, fill=division)) +
geom_boxplot(color="black") +
scale_fill_manual(values=c("lightblue", "lightpink")) +
labs(title="Box Plot of Marathon Times by Gender", x="Gender", y="Marathon Time (minutes)")+
  theme_minimal()
head(nyc_marathon)
summary(nyc_marathon)

# Identify and Remove Redundant Information::
ggplot(nyc_marathon, aes(x = division, y = time, fill = division)) +
  geom_boxplot(show.legend = FALSE) +
  scale_fill_manual(values = c("Men" = "#ff595e", "Women" = "#8ac926")) +
  labs(title = "Marathon Times by Gender (Simplified)",
       x = "Division",
       y = "Time (Minutes)") +
  theme_minimal()

# Visualize Marathon Times Over the Years::
head(nyc_marathon)

ggplot(nyc_marathon, aes(x=year, y=time, color=division, shape=division)) +
geom_point() +
scale_color_manual(values=c("lightblue", "lightpink")) +
scale_shape_manual(values=c(16, 17)) +
labs(title="Marathon Times Over the Years", x="Year", y="Marathon Time (minutes)") +
theme_minimal()

```

Interpretation: Histogram: Shows the distribution of marathon times, illustrating the shape and spread of the data. Peaks, gaps, and overall density are visible. Box Plot: Provides a summary of the data’s central tendency and spread, highlighting median, quartiles, and outliers.

It does not show the overall distribution shape or frequency details. This plot compares marathon times between men and women. Different colors (light blue for men and light pink for women) visually distinguish between the two groups. You can see differences in median times, variability, and potential outliers for each gender.

This plot compares marathon times between men and women. Different colors (light blue for men and light pink for women) visually distinguish between the two groups. You can see differences in median times, variability, and potential outliers for each gender.

Redundancy Removed: Outliers points and extra axis ticks are removed to focus on the main data features. Removing the legend is also considered if it’s redundant (e.g., if the colors are clear from the context). This update enhances the data-to-ink ratio by reducing non-essential visual elements.

Time Series Plot: This plot shows how marathon times for men and women have changed over the years. Different colors and shapes represent men and women, allowing for a clear comparison of trends and changes in marathon performance over time. This visualization provides insights into how race times have evolved, which is not visible in the histogram or box plot.

## 3 - US counties

```{r}
library(tidyverse)
library(openintro)

data(county)
ggplot(county) + geom_point(aes(x = median_edu, y = median_hh_income)) +
  geom_boxplot(aes(x = smoking_ban, y = pop2017))
  ggplot(county %>% filter(!is.na(median_edu))) + geom_point(aes(x=     homeownership, y = poverty)) + facet_grid(median_edu ~ .) 
  ggplot(county %>% filter(!is.na(median_edu))) + geom_point(aes(x = homeownership, y = poverty)) + facet_grid(. ~ median_edu) 

# A Plot::
ggplot(county %>% filter(!is.na(median_edu))) +
  geom_point(aes(x = homeownership, y = poverty)) +
  ggtitle("Plot A") +
  xlab("Homeownership Rate") +
  ylab("Poverty Rate")

# B Plot::
ggplot(county %>% filter(!is.na(median_edu))) +
  geom_point(aes(x = homeownership, y = poverty)) +
geom_smooth(aes(x = homeownership, y = poverty), se = FALSE, color = "blue") +
   ggtitle("Plot B") +
   xlab("Homeownership Rate") +
   ylab("Poverty Rate")

# C Plot::
ggplot(county %>% filter(!is.na(median_edu))) +
   geom_point(aes(x = homeownership, y = poverty)) + 
   geom_smooth(aes(x = homeownership, y = poverty, color = metro), se = FALSE   )+ 
   scale_color_manual(values = c("yes" = "green", "no" = "green")) + 
    ggtitle("Plot C") +
    xlab("Homeownership Rate") +
    ylab("Poverty Rate")

# D Plot::
ggplot(county %>% filter(!is.na(median_edu))) +
  geom_smooth(aes(x = homeownership, y = poverty, color = metro), se = FALSE) +
  geom_point(aes(x = homeownership, y = poverty)) +
  scale_color_manual(values = c("yes" = "blue", "no" = "blue")) +
  ggtitle("Plot D") +
  xlab("Homeownership Rate") +
  ylab("Poverty Rate")

#E Plot::
ggplot(county) +
  geom_point(aes(x = homeownership, y = poverty, color = metro), size = 2) +
  geom_smooth(aes(x = homeownership, y = poverty, linetype = metro), se = FALSE) +
  ggtitle("Plot E") +
  xlab("Homeownership Rate") +
  ylab("Poverty Rate") +
  theme_minimal()

# F Plot::
ggplot(county) +
  geom_point(aes(x = homeownership, y = poverty, color = metro)) +
  geom_smooth(aes(x = homeownership, y = poverty, color = metro), se = FALSE) +
  labs(color = "Metro") +
  ggtitle("Plot F") +
  xlab("Homeownership Rate") +
  ylab("Poverty Rate") +
  theme_minimal()

summary(county)
str(county)
head(county)
tail(county)
unique(county$metro)
sum(is.na(county$metro))

# G Plot::
ggplot(county) +
  geom_point(aes(x = homeownership, y = poverty, color = metro)) +
  geom_smooth(aes(x = homeownership, y = poverty), se = FALSE) +
  labs(color = "Metro") +
  ggtitle("Plot G") +
  xlab("Homeownership Rate") +
  ylab("Poverty Rate") +
  theme_minimal()

# H Plot::
ggplot(county) +
  geom_point(aes(x = homeownership, y = poverty, color = metro)) +
  labs(color = "Metro") +
  ggtitle("Plot H") +
  xlab("Homeownership Rate") +
  ylab("Poverty Rate") +
  theme_minimal()
```

**Interpretation:**

For plot A:

This scatter plot shows a negative relationship higher homeownership tends to associate with lower poverty.

For plot B:

The smoothed line makes the negative trend more evident compared to the raw points.

For plot C:

Both metro categories are plotted with green lines this redundancy reduces clarity.

For plot D:

Swapping layers doesn’t fix the redundancy. All metro lines are blue, making grouping meaningless.

For plot E:

This plot uses both color and line type to differentiate metro status, improving clarity.

For plot F:

This is a clean and effective use of color and smoothers for metro vs non-metro comparisons.

For plot G:

This version shows only one trend line but colors points less cluttered but less detail about each group.

For plot H:

Simple and clear view of the raw data, no trend lines included.

## 4 - Rental apartments in SF

```{r}
#| label: load-credit
#| message: FALSE
library(tidyverse)
library(scales)

# Load the dataset
credit <- read_csv("data/credit.csv")

#| label: credit-balance-vs-income
ggplot(credit, aes(x = income, y = balance, color = student, shape = student)) +
  geom_point(alpha = 0.8, show.legend = FALSE) +
  geom_smooth(method = "lm", se = FALSE, show.legend = FALSE) +
  facet_grid(student ~ married, labeller = labeller(
    student = c("Yes" = "Student: Yes", "No" = "Student: No"),
    married = c("Yes" = "Married: Yes", "No" = "Married: No"))) +
  scale_color_manual(values = c("Yes" = "#ff5733", "No" = "#3498db")) +
  scale_x_continuous(labels = label_dollar(prefix = "$", suffix = "K")) +
  scale_y_continuous(labels = label_dollar(prefix = "$")) +
  labs(
    title = "Income vs. Credit Card Balance by Student & Marital Status",
    x = "Income",
    y = "Credit Card Balance") +
  theme_minimal()

#| label: credit-utilization
# Calculate utilization
credit <- credit %>%
  mutate(utilization = balance / limit)

# Plot utilization vs income
ggplot(credit, aes(x = income, y = utilization, color = student, shape = student)) +
  geom_point(alpha = 0.8, show.legend = FALSE) +
  geom_smooth(method = "lm", se = FALSE, show.legend = FALSE) +
  facet_grid(student ~ married, labeller = labeller(
    student = c("Yes" = "Student: Yes", "No" = "Student: No"),
    married = c("Yes" = "Married: Yes", "No" = "Married: No"))) +
  scale_color_manual(values = c("Yes" = "#ff5733", "No" = "#3498db")) +
  labs(
    title = "Income vs. Credit Utilization by Student & Marital Status",
    x = "Income", y = "Credit Utilization") +
  theme_minimal()






 
```

Interpretation:

In part (a), the plot shows how income is related to credit card balance, separated by whether someone is a student and whether they are married. We can see that people with higher incomes tend to have higher credit card balances. However, students especially those who are not married tend to carry higher balances even if they earn less. This suggests that being a student might lead to more credit usage.

In part (b), based on what we see in the plot, the variables "student" and "married" seem useful for predicting credit card balance. This is because the relationship between income and balance changes depending on whether someone is a student or married.

In part (c), we looked at credit utlization, which is how much of their credit limit someone is using (balance ÷ limit). The plot shows that students generally have higher utilization rates. Unlike balance, utilization doesn’t increase as clearly with income, which means people with more income don’t always use more of their credit.

In part (d), we can see that the relationship between income and credit utilization is not as strong as it is with credit balance. So, while income helps explain balance, it doesn't explain utilization as well. This is important because utilization tells us more about how someone is managing their available credit, not just how much they owe.

## 5 - Napoleon’s march.

```{r}
library(ggplot2)
library(scales)
library(gridExtra)
library(dplyr)
library(ggrepel)
library(readr)

napoleon <- read_rds("./data/napoleon.rds")
Minard.troops <- napoleon$troops
Minard.cities <- napoleon$cities
Minard.temp <- napoleon$temp
summary(Minard.troops)
summary(Minard.cities)
summary(Minard.temp)
# Define breaks for the size scale
breaks <- c(1, 2, 3) * 10^5

plot_troops_detailed <- ggplot(Minard.troops, aes(x = long, y = lat)) +
  geom_path(aes(size = survivors, colour = direction, group = group),
            lineend = "round") +
  geom_point(data = Minard.cities, aes(x = long, y = lat),
             color = "red", size = 3, shape = 21, fill = "white") +
  geom_text_repel(data = Minard.cities, aes(x = long, y = lat, label = city),
                  size = 3, nudge_x = 0.5, nudge_y = 0.5) +
  scale_size(name = "Survivors", range = c(1, 10),
             breaks = breaks, labels = scales::comma(breaks)) +
  scale_color_manual(name = "Direction",
                     values = c("Advance" = "#E8CBAB", "Retreat" = "#1F1A1B")) +
  coord_cartesian(xlim = c(24, 38)) +
  labs(x = NULL, y = NULL) +
  guides(color = FALSE, size = FALSE) +
  theme_void()

# To display the plot
plot_troops_detailed

# Prepare labels for the temperature plot
Minard.temp <- Minard.temp %>%
mutate(label = paste0(temp, "° ", date))
# Create the temperature plot
plot_temp <- ggplot(Minard.temp, aes(long, temp)) +
geom_path(color = "grey", size = 1.5) +
geom_point(size = 1) +
geom_text_repel(aes(label = label), size = 2.5) +
coord_cartesian(xlim = c(24, 38)) +
labs(x = NULL, y = "Temperature") +
theme_bw() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks = element_blank(),
panel.border = element_blank())
plot_temp
grid.arrange(plot_troops_detailed, plot_temp, nrow = 2, heights = c(3.5, 1.2))

```

Description:

First section installs and loads the required R packages for data manipulation
and plotting. It then reads the napoleon.rds file to load the datasets containing information
on troops, cities, and temperatures.
Reference: Friendly, M. (2018, January 22). Minard meets ggplot2. Retrieved February 16,
2025, from http://euclid.psych.yorku.ca/www/psy6135/tutorials/Minard.html.

The code generates a detailed plot of Napoleon’s troop movements. It uses
geom_path to illustrate the route of the troops, with line thickness varying based on the number
of survivors. geom_point is used to mark the locations of cities, while geom_text_repel adds
city labels, avoiding overlap. scale_size and scale_color_manual customize the appearance
of the plot by adjusting the size and color, respectively. coord_cartesian is applied to set
the x-axis limits, and theme_void removes all additional elements like axis lines and labels for a clean presentation.

This code generates a plot depicting temperature changes along the route. It
uses geom_path to trace the temperature variations, geom_point to display data points, and
geom_text_repel to label the temperature data while preventing overlap. coord_cartesian
sets the x-axis limits, and theme_bw provides a clean, minimal background. Additionally, theme
is used to further customize the plot by removing grid lines and axis ticks for a streamlined appearance.

grid.arrange combines the two plots into a single graphic, arranging them
vertically with specified row heights for optimal alignment.
Resources Used:
1. Blog Post: Friendly, M. (2018, January 22). Minard meets ggplot2. Retrieved February
16, 2025, from http://euclid.psych.yorku.ca/www/psy6135/tutorials/Minard.html
2. ggplot2 Documentation: For an in-depth understanding of geom_path(),
scale_size(), and other functions within the ggplot2 package.
Personalization and Adjustments:
• City Points and Labels: Added red city points and a yellow fill to enhance the visibility
of city locations. Used geom_text_repel to ensure city labels are readable and avoid
overlap.
• Plot Appearance: Customized themes and labels to align with Minard’s original style
